@cpp(include="stdio.h")
package PLAPackage
    port type PLAPort_t1(bool a)
    port type PLAPort_t2(int a, int b)
    port type PLAPort_t3(bool a,bool b,bool c)
    port type PLAPort_t4(int a)
    port type PLAPort_t5(bool a,bool b)

    atom type TaskAtom()
        data int mysin,mycos
        port PLAPort_t2 produce(mysin,mycos)
        export port PLAPort_t2 sendMean(mysin,mycos)
        export port PLAPort_t2 sendBIT(mysin,mycos)

        place WAIT, START, SEND, END

        initial to WAIT
            do {mysin = 0;mycos = 0;}

        on produce from WAIT to START
            do {mysin = 1000;mycos = 1000;printf("TaskAtom: Successfully produce variables mysin & mycos\n");} //External function TBD

        on sendBIT from START to SEND
            do {printf("TaskAtom: Successfully sendBIT\n");}

        on sendMean from SEND to END
            do {printf("TaskAtom: Successfully sendMean\n");}

        internal from END to WAIT
    end

    atom type BITAtom_enc()
        data int mysin,mycos
	    data int p,q
        data bool Signal_enc
        export port PLAPort_t2 receiveBIT(mysin,mycos)
        export port PLAPort_t1 sendBIT(Signal_enc)

        place START, WAIT, EXEC, S1, S2, END

        initial to START

        internal from START to WAIT
            do {p = 0; q = 0; Signal_enc = false;}

        on receiveBIT from WAIT to EXEC
	        do {printf("BIT_enc: Successfully receive variables mysin & mycos, now mysin is %d, mycos is %d\n",mysin,mycos);}

        internal from EXEC to S1
            provided (mysin < 500 && mycos < 500)
            do {p = p + 1; q = 0;printf("BIT_enc: Successfully execute p++, state transfer from EXEC to S1, now p is %d, q is %d\n", p,q);}

        internal from EXEC to S2
            provided (mysin >= 500 && mycos >= 500)
            do {p = 0; q = q + 1;printf("BIT_enc: Successfully execute q++, state transfer from EXEC to S2, now p is %d, q is %d\n", p,q);}

        internal from EXEC to WAIT
            provided ((mysin >= 500 || mycos >= 500) && (mysin < 500 || mycos < 500))
            do {p = 0; q = 0;printf("BIT_enc: Variables p & q are reset, now p is %d, q is %d\n", p,q);}
        
        internal from S1 to END
            provided (p >= 5)
            do {Signal_enc = true;printf("BIT_enc: Successfully transfer from S1 to END\n, now Signal_enc is set to %d\n", Signal_enc);}

        internal from S2 to END
            provided (q >= 5)
            do {Signal_enc = false;printf("BIT_enc: Successfully transfer from S2 to END\n, now Signal_enc is set to %d\n", Signal_enc);}

        on sendBIT from S1 to WAIT
            provided (p < 5)
	        do {printf("BIT_enc: Successfully sendBIT and transfer from S1 to WAIT\n");}

        on sendBIT from S2 to WAIT
            provided (q < 5)
            do {printf("BIT_enc: Successfully sendBIT and transfer from S2 to WAIT\n");}

        on sendBIT from END to WAIT
	        do {printf("BIT_enc: Successfully send Signal_enc, the value is %d\n", Signal_enc);}
    end

    atom type BITAtom_sin()
        data int mysin,mycos
	    data int p,q
        data bool Signal_sin
        export port PLAPort_t2 receiveBIT(mysin,mycos)
        export port PLAPort_t1 sendBIT(Signal_sin)

        place START, WAIT, EXEC, S1, S2, END

        initial to START

        internal from START to WAIT
            do {p = 0; q = 0; Signal_sin = false;}

        on receiveBIT from WAIT to EXEC
	        do {printf("BIT_sin: Successfully receive variables mysin & mycos, now mysin is %d, mycos is %d\n",mysin,mycos);}

        internal from EXEC to S1
            provided (mysin > 4000)
            do {p = p + 1; q = 0;printf("BIT_sin: Successfully execute p++, state transfer from EXEC to S1, now p is %d, q is %d\n", p,q);}

        internal from EXEC to S2
            provided (mysin >= 500 && mysin <= 4000)
            do {p = 0; q = q + 1;printf("BIT_sin: Successfully execute q++, state transfer from EXEC to S2, now p is %d, q is %d\n", p,q);}

        internal from EXEC to WAIT
            provided (mysin < 500)
            do {p = 0; q = 0;printf("BIT_sin: Variables p & q are reset, now p is %d, q is %d\n", p,q);}
        
        internal from S1 to END
            provided (p >= 5)
            do {Signal_sin = true;printf("BIT_sin: Successfully transfer from S1 to END\n, now Signal_sin is set to %d\n", Signal_sin);}

        internal from S2 to END
            provided (q >= 5)
            do {Signal_sin = false;printf("BIT_sin: Successfully transfer from S2 to END\n, now Signal_sin is set to %d\n", Signal_sin);}

        on sendBIT from S1 to WAIT
            provided (p < 5)
	        do {printf("BIT_sin: Successfully sendBIT and transfer from S1 to WAIT\n");}

        on sendBIT from S2 to WAIT
            provided (q < 5)
	        do {printf("BIT_sin: Successfully sendBIT and transfer from S2 to WAIT\n");}

        on sendBIT from END to WAIT
	        do {printf("BIT_sin: Successfully sendBIT\n");}
    end

    atom type BITAtom_cos()
        data int mysin,mycos
	    data int p,q
        data bool Signal_cos
        
        export port PLAPort_t2 receiveBIT(mysin,mycos)
        export port PLAPort_t1 sendBIT(Signal_cos)

        place START, WAIT, EXEC, S1, S2, END

        initial to START

        internal from START to WAIT
            do {p = 0; q = 0; Signal_cos = false;}

        on receiveBIT from WAIT to EXEC
	        do {printf("BIT_cos: Successfully receive variables mysin & mycos, now mysin is %d, mycos is %d\n",mysin,mycos);}

        internal from EXEC to S1
            provided (mycos > 4000)
            do {p = p + 1; q = 0;printf("BIT_cos: Successfully execute p++, state transfer from EXEC to S1, now p is %d, q is %d\n", p,q);}

        internal from EXEC to S2
            provided (mycos >= 500 && mycos <= 4000)
            do {p = 0; q = q + 1;printf("BIT_cos: Successfully execute q++, state transfer from EXEC to S2, now p is %d, q is %d\n", p,q);}

        internal from EXEC to WAIT
            provided (mycos < 500)
            do {p = 0; q = 0;printf("BIT_cos: Variables p & q are reset, now p is %d, q is %d\n", p,q);}
        
        internal from S1 to END
            provided (p >= 5)
            do {Signal_cos = true;printf("BIT_cos: Successfully transfer from S1 to END\n, now Signal_cos is set to %d\n", Signal_cos);}

        internal from S2 to END
            provided (q >= 5)
            do {Signal_cos = false;printf("BIT_cos: Successfully transfer from S2 to END\n, now Signal_cos is set to %d\n", Signal_cos);}

        on sendBIT from S1 to WAIT
            provided (p < 5)
            do {printf("BIT_cos: Successfully sendBIT and transfer from S1 to WAIT\n");}

        on sendBIT from S2 to WAIT
            provided (q < 5)
            do {printf("BIT_cos: Successfully sendBIT and transfer from S2 to WAIT\n");}

        on sendBIT from END to WAIT
	        do {printf("BIT_cos: Successfully sendBIT\n");}
    end

    atom type BITAtom_Decider()
        data bool Signal_enc
        data bool Signal_sin
        data bool Signal_cos 
        data bool Signal

        export port PLAPort_t3 receiveSignal(Signal_enc,Signal_sin,Signal_cos)
        export port PLAPort_t1 output(Signal)

        place START, WAIT, EXEC, S1, S2

        initial to START
            do {Signal = true;printf("BIT_Decider: Initial successfully\n");}

        internal from START to WAIT
            do {printf("BIT_Decider: Successfully transfer from START to WAIT\n");}

        on receiveSignal from WAIT to EXEC
            do {printf("BIT_Decider: Successfully receiveSignal from BITDiagnosis P1 P2 P3\n");}

        internal from EXEC to S1
            provided (Signal_enc == false && Signal_sin == false && Signal_cos == false)
            do {Signal = false;printf("BIT_Decider: Successfully transfer from EXEC to S1\n");}

        internal from EXEC to S2
            provided (Signal_enc == true || Signal_sin == true || Signal_cos == true)
            do {Signal = true;printf("BIT_Decider: Successfully transfer from EXEC to S2\n");}

        on output from S1 to WAIT
            do {printf("BIT_Decider: System output signal = %d\n", Signal);}

        on output from S2 to WAIT
            do {printf("BIT_Decider: System output signal = %d\n", Signal);}
    end

    atom type CalAtom()
        data int mysin,mycos
        data int myangle

        export port PLAPort_t2 receiveMean(mysin,mycos)
        export port PLAPort_t4 sendMean(myangle)

        place START, EXEC, END

        initial to START
            do {myangle = 0;}

        on receiveMean from START to EXEC
            do {printf("CalAtom: Successfully receiveMean, now mysin is %d, mycos is %d\n",mysin,mycos);}

        internal from EXEC to END
            do {myangle = mysin*mycos+1;} //External function TBD

        on sendMean from END to START
            do {printf("CalAtom: Successfully sendMean\n");}
    end

    atom type ExtAtom()
        data int mymean
        data int p,q
        data bool Signal_ext
        data int Signal_Min_Limit,Signal_Max_Limit

        export port PLAPort_t4 receiveMean(mymean)
        export port PLAPort_t1 sendRes(Signal_ext)

        place START, WAIT, EXEC, S1, S2, END

        initial to START
            do {Signal_Min_Limit = 20000;Signal_Max_Limit = 4000000; Signal_ext = false;}

        internal from START to WAIT
            do {p = 0; q = 0;}

        on receiveMean from WAIT to EXEC

        internal from EXEC to S1
            provided (mymean > Signal_Max_Limit || mymean < Signal_Min_Limit)
            do {p = p + 1; q = 0;}

        internal from EXEC to S2
            provided (mymean >= Signal_Min_Limit && mymean <= Signal_Max_Limit)
            do {p = 0; q = q + 1;}
        
        internal from S1 to END
            provided (p >= 5)
            do {Signal_ext = true;}

        internal from S2 to END
            provided (q >= 5)
            do {Signal_ext = false;}

        on sendRes from S1 to WAIT
            provided (p < 5)
            do {printf("ExtAtom: Successfully sendRes and transfer from S1 to WAIT\n");}

        on sendRes from S2 to WAIT
            provided (q < 5)
            do {printf("ExtAtom: Successfully sendRes and transfer from S2 to WAIT\n");}

        on sendRes from END to WAIT
	        do {printf("ExtAtom: Successfully sendRes\n");}
    end

    atom type SloAtom()
        data int mymean
        data bool Signal_slo
        data int premean
	    data int p,q
	    data int Signal_Slope_Limit

        export port PLAPort_t4 receiveMean(mymean)
        export port PLAPort_t1 sendRes(Signal_slo)

        place START, WAIT, WAIT1, WAIT2, EXEC, S1, S2, END

        initial to START
	    do {Signal_Slope_Limit = 1; Signal_slo = false;}

        internal from START to WAIT
            do {p = 0; q = 0;}

        on receiveMean from WAIT to WAIT1

        on sendRes from WAIT1 to WAIT2

        internal from WAIT2 to WAIT3
            do {premean = mymean;}

        on receiveMean from WAIT3 to EXEC

        internal from EXEC to S1
            provided ((mymean - premean) > Signal_Slope_Limit || (premean - mymean) > Signal_Slope_Limit)
            do {p = p + 1; q = 0;}

        internal from EXEC to S2
            provided ((mymean - premean) <= Signal_Slope_Limit || (premean - mymean) <= Signal_Slope_Limit)
            do {p = 0; q = q + 1;}

        internal from S1 to END
            provided (p >= 5)
            do {Signal_slo = true;}

        internal from S2 to END
            provided (q >= 5)
            do {Signal_slo = false;}

        on sendRes from S1 to WAIT2
            provided (p < 5)
            do {printf("SloAtom: Successfully sendRes and transfer from S1 to WAIT2\n");}

        on sendRes from S2 to WAIT2
            provided (q < 5)
            do {printf("SloAtom: Successfully sendRes and transfer from S2 to WAIT2\n");}

        on sendRes from END to WAIT2
	        do {printf("SloAtom: Successfully sendRes\n");}
    end

    atom type ESAtom_Decider()
        data bool Signal_BIT
        data bool Signal_Ext
        data bool Signal_Slo
        data bool ValidFlag

        export port PLAPort_t5 receiveSignal1(Signal_Ext,Signal_Slo)
        export port PLAPort_t1 receiveSignal2(Signal_BIT)
        port PLAPort_t1 output(ValidFlag)

        place START, WAIT, WAIT1, EXEC, S1, S2

        initial to START
            do {ValidFlag = true;}

        internal from START to WAIT

        on receiveSignal1 from WAIT to WAIT1
	        do {printf("ES_Decider: receiveSignal from Ext & Slo\n");}

	    on receiveSignal2 from WAIT1 to EXEC 
	        do {printf("ES_Decider: receiveSignal from BIT\n");}

        internal from EXEC to S1
            provided (Signal_BIT == false && Signal_Ext == false && Signal_Slo == false)
            do {ValidFlag = false;}

        internal from EXEC to S2
            provided (Signal_BIT == true || Signal_Ext == true || Signal_Slo == true)
            do {ValidFlag = true;}

        on output from S1 to WAIT
            do {printf("ES_Decider: system output validflag = %d\n", ValidFlag);}

        on output from S2 to WAIT
            do {printf("ES_Decider: system output validflag = %d\n", ValidFlag);}
    end

    connector type OneToThree(PLAPort_t2 r1, PLAPort_t2 r2, PLAPort_t2 r3, PLAPort_t2 r4)
        define r1 r2 r3 r4

        on r1 r2 r3 r4 down {r2.a = r1.a; r3.a = r1.a; r4.a = r1.a; r2.b = r1.b; r3.b = r1.b; r4.b = r1.b;}
    end

    connector type OneToTwo(PLAPort_t4 r1, PLAPort_t4 r2, PLAPort_t4 r3)
        define r1 r2 r3 r4

        on r1 r2 r3 r4 down {r2.a = r1.a; r3.a = r1.a;}
    end

    connector type ThreeToOne(PLAPort_t1 r1, PLAPort_t1 r2, PLAPort_t1 r3, PLAPort_t3 r4)
        define r1 r2 r3 r4

        on r1 r2 r3 r4 down {r4.a = r1.a; r4.b = r2.a; r4.c = r3.a;}
    end

    connector type OneToOne_t1(PLAPort_t2 r1, PLAPort_t2 r2)
        define r1 r2

        on r1 r2 down {r2.a = r1.a; r2.b = r1.b;}
    end

    connector type TwoToOne(PLAPort_t1 r1, PLAPort_t1 r2,PLAPort_t5 r3)
	    define r1 r2 r3

	    on r1 r2 r3 down {r3.a = r1.a; r3.b = r2.a;}
    end

    connector type OneToOne_t2(PLAPort_t1 r1, PLAPort_t1 r2)
        define r1 r2

        on r1 r2 down {r2.a = r1.a}
    end

    compound type PLACompound()
        component TaskAtom t1()
        component BITAtom_enc p1()
        component BITAtom_sin p2()
        component BITAtom_cos p3()
        component BITAtom_Decider d1()
        component CalAtom c1()
        component ExtAtom e1()
        component SloAtom s1()
        component ESAtom_Decider d2()

        connector OneToOne_t1 ct1(t1.sendMean,c1.receiveMean)
        connector OneToThree ct2(t1.sendBIT,p1.receiveBIT,p2.receiveBIT,r3.receiveBIT)
        connector ThreeToOne ct3(p1.sendBIT,p2.sendBIT,p3.sendBIT,d1.receiveSignal)
        connector OneToOne ct4(d1.output,d2.receiveSignal2)
        connector OneToTwo ct5(c1.sendMean,e1.receiveMean,s1.receiveMean)
        connector TwoToOne ct6(e1.sendRes,s1.sendRes,d2.receiveSignal1)

        //export port d2.output as output
    end
end