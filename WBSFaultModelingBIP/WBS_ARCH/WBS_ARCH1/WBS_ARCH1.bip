@cpp(include="stdio.h")
package WBS_ARCH1

	extern function int min(int, int)
	extern function int max(int, int)

	// Constant data definitions 

	// Port types definitions
	port type WBSPort_int ( int var )
	port type WBSPort_bool ( bool var )
	port type WBSPort_int_int ( int var1, int var2 )

	// Connector types definitions
	connector type transInt( WBSPort_int p1, WBSPort_int p2 )
		define p1 p2
		on p1 p2 down { p2.var = p1.var; }
	end

	connector type transBool( WBSPort_bool p1, WBSPort_bool p2 )
		define p1 p2
		on p1 p2 down { p2.var = p1.var; }
	end

	connector type transBool_OneToTwo( WBSPort_bool p1, WBSPort_bool p2, WBSPort_bool p3 )
		define p1 p2 p3
		on p1 p2 p3 down { p2.var = p1.var; p3.var = p1.var; }
	end

	connector type transInt_TwoToOne ( WBSPort_int p1, WBSPort_int p2, WBSPort_int_int p3 )
		define p1 p2 p3
		on p1 p2 p3 down { p3.var1 = p1.var; p3.var2 = p2.var; } 
	end

	connector type transInt_max( WBSPort_int p1, WBSPort_int p2, WBSPort_int p3 )
		define p1 p2 p3
		on p1 p2 p3 down { p3.var = max(p1.var, p2.var); }
	end

	// Atom types definitions
	atom type HydraulicPump()
		// Variable declarations
		data int Hydraulic

		// Port declarations
		export port WBSPort_int sendHydraulic ( Hydraulic )

		// Clock declarations

		// Locations declaration
		place Exec

		// Initial location declarations
		initial to Exec do { Hydraulic = 10; }

		// transitions
		on sendHydraulic from Exec to Exec

		// invariants

		// Priorities
	end

	atom type ShutoffValve()
		// Variable declarations
		data int ShutOffHyd
		data int Hydraulic
		data bool SystemValidity

		// Port declarations
		export port WBSPort_bool receiveSYSVal ( SystemValidity )
		export port WBSPort_int receiveHydraulic ( Hydraulic )
		export port WBSPort_int sendSOHyd ( ShutOffHyd )

		// Clock declarations

		// Locations declaration
		place Init, R1,Exec, S1, S2

		// Initial location declarations
		initial to Init do { ShutOffHyd = 0; }

		// transitions
		on receiveSYSVal from Init to R1

		on receiveHydraulic from R1 to Exec

		internal from Exec to S1
			provided(SystemValidity == true)
			do{ShutOffHyd = Hydraulic;}

		internal from Exec to S2
			provided(SystemValidity == false)
			do{ShutOffHyd = 0;}

		on sendSOHyd from S1 to Init

		on sendSOHyd from S2 to Init

		// invariants

		// Priorities
	end

	// TBD
	atom type SelectorValve()
		// Variable declarations
		data int GreenHydraulicOut
		data int BlueHydraulicOut
		data bool SystemValidity
		data int GreenHydraulicIn
		data int BlueHydraulicIn

		// Port declarations
		export port WBSPort_bool receiveSYSVal ( SystemValidity )
		export port WBSPort_int receiveGreenHyd ( GreenHydraulicIn )
		export port WBSPort_int receiveBlueHyd ( BlueHydraulicIn )
		export port WBSPort_int sendGreenHyd ( GreenHydraulicOut )
		export port WBSPort_int sendBlueHyd ( BlueHydraulicOut )

		// Clock declarations

		// Locations declaration
		place Init, R1, R2, Exec, S1, S2, S3, S4

		// Initial location declarations
		initial to Init do { GreenHydraulicOut = 0; BlueHydraulicOut = 0; }

		// transitions
		on receiveSYSVal from Init to R1

		on receiveGreenHyd from R1 to R2

		on receiveBlueHyd from R2 to Exec

		internal from Exec to S1 
			provided( SystemValidity && GreenHydraulicIn > 0)
			do{ GreenHydraulicOut = GreenHydraulicIn; BlueHydraulicOut = 0; }

		internal from Exec to S2 
			provided( (!SystemValidity || GreenHydraulicIn == 0) && BlueHydraulicIn > 0 )
			do{ BlueHydraulicOut = BlueHydraulicIn; GreenHydraulicOut = 0; }

		internal from Exec to S2 
			provided( (!SystemValidity || GreenHydraulicIn == 0) && BlueHydraulicIn > 0 )
			do{ BlueHydraulicOut = BlueHydraulicIn; GreenHydraulicOut = 0; }

		internal from Exec to S3
			provided( !(SystemValidity && GreenHydraulicIn > 0) && !((!SystemValidity || GreenHydraulicIn == 0) && BlueHydraulicIn > 0))		
			do { GreenHydraulicOut = 0; BlueHydraulicOut = 0; }

		on sendBlueHyd from S1 to S4

		on sendBlueHyd from S2 to S4

		on sendBlueHyd from S3 to S4

		on sendGreenHyd from S4 to Init

		// invariants

		// Priorities
	end

	// TBD
	atom type AntiSkidValve()
		// Variable declarations
		data int AntiSkidHydraulic
		data int Hydraulic
		data int AntiSkidCmd

		// Port declarations
		export port WBSPort_int receiveASCmd ( AntiSkidCmd )
		export port WBSPort_int receiveHydraulic ( Hydraulic )
		export port WBSPort_int sendASHyd ( AntiSkidHydraulic )

		// Clock declarations

		// Locations declaration
		place Init, R1, Exec, S1

		// Initial location declarations
		initial to Init do { AntiSkidHydraulic = 0; }

		// transitions
		on receiveASCmd from Init to R1

		on receiveHydraulic from R1 to Exec

		internal from Exec to S1
			do { AntiSkidHydraulic = min(AntiSkidCmd, Hydraulic); }

		on sendASHyd from S1 to Init

		// invariants

		// Priorities
	end

	// TBD
	atom type BrakePedal()
		// Variable declarations
		data int PedalPosition

		// Port declarations
		export port WBSPort_int sendPP ( PedalPosition )

		// Clock declarations

		// Locations declaration
		place Exec

		// Initial location declarations
		initial to Exec do { PedalPosition = 8; }

		on sendPP from Exec to Exec

		// transitions

		// invariants

		// Priorities
	end

	// TBD
	atom type Wheel()
		// Variable declarations
		data int WheelPressure
		data int GreenMeterHydraulic
		data int BlueMeterHydraulic

		// Port declarations
		export port WBSPort_int_int receiveMeterHyd ( GreenMeterHydraulic, BlueMeterHydraulic )
		export port WBSPort_int sendWheelPressure ( WheelPressure )

		// Clock declarations

		// Locations declaration
		place Init, Exec, S1

		// Initial location declarations
		initial to Init do { WheelPressure = 0; }

		// transitions
		on receiveMeterHyd from Init to Exec

		internal from Exec to S1
			do { WheelPressure = GreenMeterHydraulic + BlueMeterHydraulic; }

		on sendWheelPressure from S1 to Init

		// invariants

		// Priorities
	end

	atom type MeterValve()
		// Variable declarations
		data int Hydraulic
		data int MeterHyd
		data bool BrakeAntiSkidCMD
		data bool MechanicalCMD

		// Port declarations
		export port WBSPort_bool receiveBRKASCMD ( BrakeAntiSkidCMD )
		export port WBSPort_int receiveHyd ( Hydraulic )
		export port WBSPort_int sendMeterHyd ( MeterHyd )

		// Clock declarations

		// Locations declaration
		place Init, R2, Exec, S1, S2

		// Initial location declarations
		initial to Init do { MeterHyd = 0; MechanicalCMD = false; }

		// transitions
		on receiveBRKASCMD from Init to R2

		on receiveHyd from R2 to Exec

		internal from Exec to S1
			provided(BrakeAntiSkidCMD == true || MechanicalCMD == true )
			do{MeterHyd = Hydraulic;}	

		internal from Exec to S2
			provided(BrakeAntiSkidCMD == false && MechanicalCMD == false)
			do{MeterHyd = 0;}

		on sendMeterHyd from S1 to Init

		on sendMeterHyd from S2 to Init

		// invariants

		// Priorities
	end

	atom type BSCU()
		// Variable declarations
		data int WheelSpeed
		data int PedalPosition
		data int GroundSpeed
		data bool SystemValidity
		data bool BrakeAntiSkidCMD
		data bool Power
		data int AntiSkidCmd

		// Port declarations
		export port WBSPort_int receiveGSpeed ( GroundSpeed )
		export port WBSPort_int receiveWSpeed ( WheelSpeed )
		export port WBSPort_int receivePP ( PedalPosition )
		export port WBSPort_bool sendSYSVal ( SystemValidity )
		export port WBSPort_bool sendBRKASCMD ( BrakeAntiSkidCMD )
		export port WBSPort_int sendAntiSkidCmd ( AntiSkidCmd )
 
		// Clock declarations

		// Locations declaration
		place Exec1, R1, R2, R3, P1, P2, Exec2, AS1, AS2, AS3

		// Initial location declarations
		initial to Exec1 do { BrakeAntiSkidCMD = false; SystemValidity = false; Power = true;}

		// transitions
		on receiveGSpeed from Exec1 to R1

		on receiveWSpeed from R1 to R2

		on receivePP from R2 to R3

		internal from R3 to P1
			provided(Power == true)
			do{SystemValidity = true;}

		internal from R3 to P2
			provided(Power == false)
			do{SystemValidity = false;}

		on sendSYSVal from P1 to Exec2

		on sendSYSVal from P2 to Exec2

		internal from Exec2 to AS1
			provided(PedalPosition == 0 || WheelSpeed != GroundSpeed)
			do{BrakeAntiSkidCMD = false;}

		internal from Exec2 to AS2
			provided(PedalPosition != 0 && WheelSpeed == GroundSpeed)
			do{BrakeAntiSkidCMD = true;}

		on sendBRKASCMD from AS1 to AS3

		on sendBRKASCMD from AS2 to AS3

		on sendAntiSkidCmd from AS3 to Exec1

		// invariants

		// Priorities
	end

	atom type WheelSpeedProvider()
		// Variable declarations
		data int WheelSpeed

		// Port declarations
		export port WBSPort_int sendWSpeed ( WheelSpeed )

		// Clock declarations

		// Locations declaration
		place s0

		// Initial location declarations
		initial to s0 do {WheelSpeed = 8;}

		// transitions
		on sendWSpeed from s0 to s0

		// invariants

		// Priorities
	end

	atom type PedalPositionProvider()
		// Variable declarations
		data int PedalPosition
		data bool Mechanical

		// Port declarations
		export port WBSPort_int sendPP ( PedalPosition )

		// Clock declarations

		// Locations declaration
		place s0

		// Initial location declarations
		initial to s0 do {PedalPosition = 5;}

		// transitions
		on sendPP from s0 to s0

		// invariants

		// Priorities
	end

	atom type GroundSpeedProvider()
		// Variable declarations
		data int GroundSpeed

		// Port declarations
		export port WBSPort_int sendGSpeed ( GroundSpeed )

		// Clock declarations

		// Locations declaration
		place s0

		// Initial location declarations
		initial to s0 do {GroundSpeed = 8;}

		// transitions
		on sendGSpeed from s0 to s0 

		// invariants

		// Priorities
	end

	atom type WheelPressureMonitor()
		// Variable declarations
		data int WheelPressure

		// Port declarations
		export port WBSPort_int receiveWheelPressure ( WheelPressure )

		// Clock declarations

		// Locations declaration
		place s0

		// Initial location declarations
		initial to s0

		// transitions
		on receiveWheelPressure from s0 to s0

		// invariants

		// Priorities
	end

	// Compound types definitions
	compound type Compound()

		// Variable declarations

		// Component instantiations
		component WheelSpeedProvider WheelSpeedProvider()
		component PedalPositionProvider PedalPositionProvider()
		component GroundSpeedProvider GroundSpeedProvider()
		component ShutoffValve ShutoffValve()
		component BSCU BSCU()
		component WheelPressureMonitor WheelPressureMonitor()
		component HydraulicPump BlueHydraulicPump()
		component HydraulicPump Accumulator()
		component HydraulicPump GreenHydraulicPump()
		component MeterValve GreenMeterValve()
		component MeterValve BlueMeterValve()
		component SelectorValve SelectorValve()
		component AntiSkidValve AntiSkidValve()
		component Wheel Wheel()

		// Connector instantiations
		connector transInt WheelSpeed_Provider_To_BSCU( WheelSpeedProvider.sendWSpeed, BSCU.receiveWSpeed)
		connector transInt PedalPosition_Provider_To_BSCU( PedalPositionProvider.sendPP, BSCU.receivePP)
		connector transInt GroundSpeed_Provider_To_BSCU( GroundSpeedProvider.sendGSpeed, BSCU.receiveGSpeed)
		connector transBool_OneToTwo SystemValidity_BSUC_To_Shutoff_Selector( BSCU.sendSYSVal, ShutoffValve.receiveSYSVal, SelectorValve.receiveSYSVal)
		connector transBool_OneToTwo BrakeAntiSkidCommand_BSCU_To_GreenMeter_BlueMeter( BSCU.sendBRKASCMD, GreenMeterValve.receiveBRKASCMD, BlueMeterValve.receiveBRKASCMD)
		connector transInt Hydraulic_GreenPump_To_Shutoff( GreenHydraulicPump.sendHydraulic, ShutoffValve.receiveHydraulic)
		connector transInt Hydraulic_Shutoff_To_Selector( ShutoffValve.sendSOHyd, SelectorValve.receiveGreenHyd)
		connector transInt Pressure_Wheel_To_Monitor( Wheel.sendWheelPressure, WheelPressureMonitor.receiveWheelPressure)
		connector transInt AntiSkidCommand_BSCU_To_AntiSkid( BSCU.sendAntiSkidCmd, AntiSkidValve.receiveASCmd)
		connector transInt_max Hydraulic_BluePump_Accumulator_To_Selector( BlueHydraulicPump.sendHydraulic, Accumulator.sendHydraulic, SelectorValve.receiveBlueHyd)
		connector transInt Hydraulic_Selector_To_GreenMeter( SelectorValve.sendGreenHyd, GreenMeterValve.receiveHyd)
		connector transInt Hydraulic_Selector_To_AntiSkid( SelectorValve.sendBlueHyd, AntiSkidValve.receiveHydraulic)
		connector transInt Hydraulic_AntiSkid_To_BlueMeter( AntiSkidValve.sendASHyd, BlueMeterValve.receiveHyd)
		connector transInt_TwoToOne Hydraulic_GreenMeter_BlueMeter_To_Wheel( GreenMeterValve.sendMeterHyd, BlueMeterValve.sendMeterHyd, Wheel.receiveMeterHyd)

		// Priority instantiations
	end
end