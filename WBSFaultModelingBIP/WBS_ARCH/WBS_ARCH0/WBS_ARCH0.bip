@cpp(include="stdio.h")
package WBS_ARCH0

	// Constant data definitions 

	// Port types definitions
	port type WBSPort_int ( int var )
	port type WBSPort_bool ( bool var )

	// Connector types definitions
	connector type transInt( WBSPort_int p1, WBSPort_int p2 )
		define p1 p2
		on p1 p2 down { p2.var = p1.var; }
	end

	connector type transBool( WBSPort_bool p1, WBSPort_bool p2 )
		define p1 p2
		on p1 p2 down { p2.var = p1.var; }
	end

	// Atom types definitions
	atom type HydraulicPump()
		// Variable declarations
		data int Hydraulic

		// Port declarations
		export port WBSPort_int sendHydraulic ( Hydraulic )

		// Clock declarations

		// Locations declaration
		place Exec

		// Initial location declarations
		initial to Exec do {Hydraulic = 10;}

		// transitions
		on sendHydraulic from Exec to Exec

		// invariants

		// Priorities
	end

	atom type ShutoffValve()
		// Variable declarations
		data int ShutOffHyd
		data int Hydraulic
		data bool SystemValidity

		// Port declarations
		export port WBSPort_bool receiveSYSVal ( SystemValidity )
		export port WBSPort_int receiveHydraulic ( Hydraulic )
		export port WBSPort_int sendSOHyd ( ShutOffHyd )

		// Clock declarations

		// Locations declaration
		place Init, R1,Exec, S1, S2

		// Initial location declarations
		initial to Init do { ShutOffHyd = 0; }

		// transitions
		on receiveSYSVal from Init to R1

		on receiveHydraulic from R1 to Exec

		internal from Exec to S1
			provided(SystemValidity == true)
			do{ShutOffHyd = Hydraulic;}

		internal from Exec to S2
			provided(SystemValidity == false)
			do{ShutOffHyd = 0;}

		on sendSOHyd from S1 to Init

		on sendSOHyd from S2 to Init

		// invariants

		// Priorities
	end

	atom type MeterValve()
		// Variable declarations
		data int ShutOffHyd
		data int MeterHyd
		data bool BrakeAntiSkidCMD
		data bool MechanicalCMD

		// Port declarations
		export port WBSPort_bool receiveBRKASCMD ( BrakeAntiSkidCMD )
		export port WBSPort_int receiveSOHyd ( ShutOffHyd )
		export port WBSPort_int sendMeterHyd ( MeterHyd )

		// Clock declarations

		// Locations declaration
		place Init, R2, Exec, S1, S2

		// Initial location declarations
		initial to Init do { MeterHyd = 0; MechanicalCMD = false; }

		// transitions
		on receiveBRKASCMD from Init to R2

		on receiveSOHyd from R2 to Exec

		internal from Exec to S1
			provided(BrakeAntiSkidCMD == true || MechanicalCMD == true )
			do{MeterHyd = ShutOffHyd;}	

		internal from Exec to S2
			provided(BrakeAntiSkidCMD == false && MechanicalCMD == false)
			do{MeterHyd = 0;}

		on sendMeterHyd from S1 to Init

		on sendMeterHyd from S2 to Init

		// invariants

		// Priorities
	end

	atom type BSCU()
		// Variable declarations
		data int WheelSpeed
		data int PedalPosition
		data int GroundSpeed
		data bool SystemValidity
		data bool BrakeAntiSkidCMD
		data bool Power

		// Port declarations
		export port WBSPort_int receiveGSpeed ( GroundSpeed )
		export port WBSPort_int receiveWSpeed ( WheelSpeed )
		export port WBSPort_int receivePP ( PedalPosition )
		export port WBSPort_bool sendSYSVal ( SystemValidity )
		export port WBSPort_bool sendBRKASCMD ( BrakeAntiSkidCMD )

		// Clock declarations

		// Locations declaration
		place Exec1, R1, R2, R3, P1, P2, Exec2, AS1, AS2

		// Initial location declarations
		initial to Exec1 do { BrakeAntiSkidCMD = false; SystemValidity = false; Power = true;}

		// transitions
		on receiveGSpeed from Exec1 to R1

		on receiveWSpeed from R1 to R2

		on receivePP from R2 to R3

		internal from R3 to P1
			provided(Power == true)
			do{SystemValidity = true;}

		internal from R3 to P2
			provided(Power == false)
			do{SystemValidity = false;}

		on sendSYSVal from P1 to Exec2

		on sendSYSVal from P2 to Exec2

		internal from Exec2 to AS1
			provided(PedalPosition == 0 || WheelSpeed != GroundSpeed)
			do{BrakeAntiSkidCMD = false;}

		internal from Exec2 to AS2
			provided(PedalPosition != 0 && WheelSpeed == GroundSpeed)
			do{BrakeAntiSkidCMD = true;}

		on sendBRKASCMD from AS1 to Exec1

		on sendBRKASCMD from AS2 to Exec1

		// invariants

		// Priorities
	end

	// Avionics Systems
	atom type WheelSpeedProvider()
		// Variable declarations
		data int WheelSpeed

		// Port declarations
		export port WBSPort_int sendWSpeed ( WheelSpeed )

		// Clock declarations

		// Locations declaration
		place s0

		// Initial location declarations
		initial to s0 do {WheelSpeed = 8;}

		// transitions
		on sendWSpeed from s0 to s0

		// invariants

		// Priorities
	end

	atom type PedalPositionProvider()
		// Variable declarations
		data int PedalPosition

		// Port declarations
		export port WBSPort_int sendPP ( PedalPosition )

		// Clock declarations

		// Locations declaration
		place s0

		// Initial location declarations
		initial to s0 do {PedalPosition = 5;}

		// transitions
		on sendPP from s0 to s0

		// invariants

		// Priorities
	end

	atom type GroundSpeedProvider()
		// Variable declarations
		data int GroundSpeed

		// Port declarations
		export port WBSPort_int sendGSpeed ( GroundSpeed )

		// Clock declarations

		// Locations declaration
		place s0

		// Initial location declarations
		initial to s0 do {GroundSpeed = 8;}

		// transitions
		on sendGSpeed from s0 to s0 

		// invariants

		// Priorities
	end

	atom type MeterHydMonitor()
		// Variable declarations
		data int MeterHyd

		// Port declarations
		export port WBSPort_int receiveMeterHyd ( MeterHyd )

		// Clock declarations

		// Locations declaration
		place s0

		// Initial location declarations
		initial to s0 do { MeterHyd = 0; }

		// transitions
		on receiveMeterHyd from s0 to s0

		// invariants

		// Priorities
	end

	// Compound types definitions
	compound type Compound()

		// Variable declarations

		// Component instantiations
		component WheelSpeedProvider WheelSpeedProvider()
		component PedalPositionProvider PedalPositionProvider()
		component GroundSpeedProvider GroundSpeedProvider()
		component HydraulicPump HydraulicPump()
		component ShutoffValve ShutoffValve()
		component MeterValve MeterValve()
		component BSCU BSCU()
		component MeterHydMonitor MeterHydMonitor()

		// Connector instantiations
		connector transInt WheelSpeed_Provider_To_BSCU( WheelSpeedProvider.sendWSpeed, BSCU.receiveWSpeed)
		connector transInt PedalPosition_Provider_To_BSCU( PedalPositionProvider.sendPP, BSCU.receivePP)
		connector transInt GroundSpeed_Provider_To_BSCU( GroundSpeedProvider.sendGSpeed, BSCU.receiveGSpeed)
		connector transBool SystemValidity_BSCU_To_ShutoffVavle( BSCU.sendSYSVal, ShutoffValve.receiveSYSVal)
		connector transBool BrakeAntiSkidCommand_BSCU_To_MeterVavle( BSCU.sendBRKASCMD, MeterValve.receiveBRKASCMD)
		connector transInt Hydraulic_Pump_To_ShutoffValve( HydraulicPump.sendHydraulic, ShutoffValve.receiveHydraulic)
		connector transInt Hydraulic_ShutoffValve_To_MeterValve( ShutoffValve.sendSOHyd, MeterValve.receiveSOHyd)
		connector transInt Hydraulic_MeterValve_To_Monitor( MeterValve.sendMeterHyd, MeterHydMonitor.receiveMeterHyd)

		// Priority instantiations
	end
end