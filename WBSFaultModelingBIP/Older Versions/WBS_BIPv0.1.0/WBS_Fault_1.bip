@cpp(include="stdio.h")
package WBS_Fault_1
	// extern function printf for output
	extern function printf (string, int)
	extern function printf (string, int, int)
	extern function printf (string, int, int, int, bool)
	extern function printf (string, bool)

	// Constant data definitions 

	// Port types definitions
	port type WBSPort_t1 ( int var )
	port type WBSPort_t2 ( bool var )
	port type Internal_Port ()

	// Connector types definitions

	// Add a connector type for internal Shutoff valve and Meter valve fault model
	connector type transFaultManageSig( WBSPort_t1 p1, WBSPort_t1 p2, WBSPort_t1 p3, WBSPort_t1 p4 )
		define p1 p2 p3 p4
		on p1 p2 p3 p4 down { p2.var = p1.var; p3.var = p1.var; p4.var = p1.var; }
	end

	connector type transFaultManageSig_v2( WBSPort_t1 p1, WBSPort_t1 p2, WBSPort_t1 p3 )
		define p1 p2 p3
		on p1 p2 p3 down { p2.var = p1.var; p3.var = p1.var; }
	end

	connector type transHyd( WBSPort_t1 p1, WBSPort_t1 p2 )
		define p1 p2
		on p1 p2 down { p2.var = p1.var; }
	end

	connector type transHyd_Fault( WBSPort_t1 p1, WBSPort_t1 p2 )
		define p1' p2
		on p1 p2 down { p2.var = p1.var; }
	end

	connector type transCmd( WBSPort_t2 p1, WBSPort_t2 p2 )
		define p1 p2
		on p1 p2 down { p2.var = p1.var; }
	end

	// Fault model for BSCU Module One
	connector type sendBSCUFault( WBSPort_t2 p1, WBSPort_t2 p2)
		data bool signal
		export port WBSPort_t2 sendSignal(signal)
		define p1' p2'
		on p1 up { signal = p1.var; }
		on p2 up { signal = p2.var; }
	end

	// Fault model for BSCU Module Two
	connector type getBSCUFault( WBSPort_t2 p1, WBSPort_t2 p2 )
		define p1 p2
		on p1 p2 down { p2.var = p1.var; }
	end

	connector type getPWR( WBSPort_t2 p1)
		data bool signal
		export port WBSPort_t2 receiveSignal(signal)
		define p1'
		on p1 down { p1.var = signal; }
	end

	connector type getGSpeed( WBSPort_t1 p1)
		data int signal
		export port WBSPort_t1 receiveSignal(signal)
		define p1'
		on p1 down { p1.var = signal; }
	end

	connector type getWSpeed( WBSPort_t1 p1)
		data int signal
		export port WBSPort_t1 receiveSignal(signal)
		define p1'
		on p1 down { p1.var = signal; }
	end

	connector type getPP( WBSPort_t1 p1)
		data int signal
		export port WBSPort_t1 receiveSignal(signal)
		define p1'
		on p1 down { p1.var = signal; }
	end

	// Fault model for Power Supply
	connector type sendPWR( WBSPort_t2 p1, WBSPort_t2 p2)
		data bool signal
		export port WBSPort_t2 sendSignal(signal)
		define p1' p2'
		on p1 up { signal = p1.var; }
		on p2 up { signal = p2.var; }
	end

	// Fault model for Hydraulic Pump
	connector type sendHydraulic( WBSPort_t1 p1, WBSPort_t1 p2)
		data int signal
		export port WBSPort_t1 sendSignal(signal)
		define p1' p2'
		on p1 up { signal = p1.var; }
		on p2 up { signal = p2.var; }
	end

	// Fault model for Shutoff Valve
	connector type getSYSVal( WBSPort_t2 p1, WBSPort_t2 p2, WBSPort_t2 p3)
		data bool signal
		export port WBSPort_t2 receiveSignal(signal)
		define p1' p2' p3'
		on p1 down { p1.var = signal; printf("signal received is %d\n", signal);}
		on p2 down { p2.var = signal; printf("signal received is %d\n", signal);}
		on p3 down { p3.var = signal; printf("signal received is %d\n", signal);}
	end

	connector type sendSOHyd( WBSPort_t1 p1, WBSPort_t1 p2, WBSPort_t1 p3)
		data int signal
		export port WBSPort_t1 sendSignal(signal)
		define p1' p2' p3'
		on p1 up { signal = p1.var; }
		on p2 up { signal = p2.var; }
		on p3 up { signal = p3.var; }
	end

	connector type getHydraulic( WBSPort_t1 p1, WBSPort_t1 p2, WBSPort_t1 p3)
		data int signal
		export port WBSPort_t1 sendSignal(signal)
		define p1' p2' p3'
		on p1 down { p1.var = signal; printf("signal received is %d\n", signal);}
		on p2 down { p2.var = signal; printf("signal received is %d\n", signal);}
		on p3 down { p3.var = signal; printf("signal received is %d\n", signal);}
	end

	// Fault model for Meter Valve
	connector type getBRKASCMD( WBSPort_t2 p1, WBSPort_t2 p2, WBSPort_t2 p3)
		data bool signal
		export port WBSPort_t2 receiveSignal(signal)
		define p1' p2' p3'
		on p1 down { p1.var = signal; printf("signal received is %d\n", signal);}
		on p2 down { p2.var = signal; printf("signal received is %d\n", signal);}
		on p3 down { p3.var = signal; printf("signal received is %d\n", signal);}
	end

	connector type sendMeterHyd( WBSPort_t1 p1, WBSPort_t1 p2, WBSPort_t1 p3)
		data int signal
		export port WBSPort_t1 sendSignal(signal)
		define p1' p2' p3'
		on p1 up { signal = p1.var; }
		on p2 up { signal = p2.var; }
		on p3 up { signal = p3.var; }
	end

	connector type getSOHyd( WBSPort_t1 p1, WBSPort_t1 p2, WBSPort_t1 p3)
		data int signal
		export port WBSPort_t1 sendSignal(signal)
		define p1' p2' p3'
		on p1 down { p1.var = signal; printf("signal received is %d\n", signal);}
		on p2 down { p2.var = signal; printf("signal received is %d\n", signal);}
		on p3 down { p3.var = signal; printf("signal received is %d\n", signal);}
	end

	connector type sendSYSVal ( WBSPort_t2 p1 )
		data bool signal
		export port WBSPort_t2 sendSignal(signal)
		define p1'
		on p1 up { signal = p1.var; }
	end

	connector type sendBRKASCMD ( WBSPort_t2 p1 )
		data bool signal
		export port WBSPort_t2 sendSignal(signal)
		define p1'
		on p1 up { signal = p1.var; }
	end

	// Atom types definitions
	atom type HydraulicPump()
		// Variable declarations
		data int Hydraulic
		data int ManageSignal

		// Port declarations
		export port WBSPort_t1 sendHydraulic ( Hydraulic )
		export port WBSPort_t1 receiveManager (ManageSignal)

		// Clock declarations

		// Locations declaration
		place Exec, Init, Init2

		// Initial location declarations
		initial to Init do { Hydraulic = 0; }

		// transitions
		on receiveManager from Init to Init2

		internal from Init2 to Exec
			provided(ManageSignal == 0)
			do { Hydraulic = 10; }

		internal from Init2 to Init
			provided(ManageSignal != 0)

		on sendHydraulic from Exec to Init

		// invariants

		// Priorities
	end

	atom type HydraulicPump_Loss()
		// Variable declarations
		data int Hydraulic
		data int ManageSignal

		// Port declarations
		export port WBSPort_t1 sendHydraulic ( Hydraulic )
		export port WBSPort_t1 receiveManager (ManageSignal)

		// Clock declarations

		// Locations declaration
		place Exec, Init, Init2

		// Initial location declarations
		initial to Init do { Hydraulic = 0; }

		// transitions
		on receiveManager from Init to Init2

		internal from Init2 to Exec
			provided(ManageSignal == 1)
			do{ Hydraulic = 0; }

		internal from Init2 to Init
			provided(ManageSignal != 1)

		on sendHydraulic from Exec to Init

		// invariants

		// Priorities
	end

	atom type ShutoffValve()
		// Variable declarations
		data int ShutOffHyd
		data int Hydraulic
		data int ManageSignal
		data bool SystemValidity

		// Port declarations
		export port WBSPort_t2 receiveSYSVal ( SystemValidity )
		export port WBSPort_t1 receiveHydraulic ( Hydraulic )
		export port WBSPort_t1 sendSOHyd ( ShutOffHyd )
		export port WBSPort_t1 receiveManager (ManageSignal)

		// Clock declarations

		// Locations declaration
		place Init, R1,Exec, S1, S2, Init2, Init3

		// Initial location declarations
		initial to Init do { ShutOffHyd = 0; SystemValidity = false; Hydraulic = 0; ManageSignal = 0; }

		// transitions
		on receiveManager from Init to Init2

		internal from Init2 to Init3
			provided(ManageSignal == 0)
			do {printf("ShutoffValve one :ManageSignal is %d, trans from Init2 to Init3\n", ManageSignal);}

		internal from Init2 to Init
			provided(ManageSignal != 0)
			do {printf("ShutoffValve one :ManageSignal is %d, trans from Init2 to Init\n", ManageSignal);}

		on receiveSYSVal from Init3 to R1
			do {printf("ShutoffValve one :SystemValidity received is %d, trans from Init3 to R1\n", SystemValidity);}

		on receiveHydraulic from R1 to Exec
			do {printf("ShutoffValve one :Hydraulic received is %d, trans from R1 to Exec\n", Hydraulic);}

		internal from Exec to S1
			provided(SystemValidity == true)
			do{ShutOffHyd = Hydraulic; printf("In ShutoffValve one, ShutoffHyd is %d, Hydraulic is %d, trans from Exec to S1\n",ShutOffHyd,Hydraulic);}

		internal from Exec to S2
			provided(SystemValidity == false)
			do{ShutOffHyd = 0;printf("In ShutoffValve one, ShutoffHyd is %d, Hydraulic is %d, trans from Exec to S2\n",ShutOffHyd,Hydraulic);}

		on sendSOHyd from S1 to Init
			do {printf("ShutoffValve one :ShutOffHyd is %d, trans from S1 to Init\n", ShutOffHyd);}

		on sendSOHyd from S2 to Init
			do {printf("ShutoffValve one :ShutOffHyd is %d, trans from S2 to Init\n",ShutOffHyd);}

		// invariants

		// Priorities
	end

	// For fault model
	atom type ShutoffValve_StuckOpen()
		// Variable declarations
		data int ShutOffHyd
		data int Hydraulic
		data int ManageSignal
		data bool SystemValidity

		// Port declarations
		export port WBSPort_t2 receiveSYSVal ( SystemValidity )
		export port WBSPort_t1 receiveHydraulic ( Hydraulic )
		export port WBSPort_t1 sendSOHyd ( ShutOffHyd )
		export port WBSPort_t1 receiveManager (ManageSignal)

		// Clock declarations

		// Locations declaration
		place Init, R1,Exec, S1, S2, Init2, Init3

		// Initial location declarations
		initial to Init do { ShutOffHyd = 0; SystemValidity = false; Hydraulic = 0; ManageSignal = 0; }

		// transitions
		on receiveManager from Init to Init2

		internal from Init2 to Init3
			provided(ManageSignal == 2)
			do {printf("ShutoffValve two :ManageSignal is %d, trans from Init2 to Init3\n", ManageSignal);}

		internal from Init2 to Init
			provided(ManageSignal != 2)
			do {printf("ShutoffValve two :ManageSignal is %d, trans from Init2 to Init\n", ManageSignal);}

		on receiveSYSVal from Init3 to R1
			do {printf("ShutoffValve two :SystemValidity received is %d, trans from Init3 to R1\n", SystemValidity);}

		on receiveHydraulic from R1 to Exec
			do {printf("ShutoffValve two :Hydraulic received is %d, trans from R1 to Exec\n", Hydraulic);}

		internal from Exec to S1
			provided(SystemValidity == true)
			do{ShutOffHyd = Hydraulic;}

		internal from Exec to S2
			provided(SystemValidity == false)
			do{ShutOffHyd = Hydraulic;}

		on sendSOHyd from S1 to Init
			do {printf("ShutoffValve two :ShutOffHyd is %d, trans from S1 to Init\n", ShutOffHyd);}

		on sendSOHyd from S2 to Init
			do {printf("ShutoffValve two :ShutOffHyd is %d, trans from S2 to Init\n",ShutOffHyd);}

		// invariants

		// Priorities
	end

	// For fault model
	atom type ShutoffValve_StuckClose()
		// Variable declarations
		data int ShutOffHyd
		data int Hydraulic
		data int ManageSignal
		data bool SystemValidity

		// Port declarations
		export port WBSPort_t2 receiveSYSVal ( SystemValidity )
		export port WBSPort_t1 receiveHydraulic ( Hydraulic )
		export port WBSPort_t1 sendSOHyd ( ShutOffHyd )
		export port WBSPort_t1 receiveManager (ManageSignal)

		// Clock declarations

		// Locations declaration
		place Init, R1,Exec, S1, S2, Init2, Init3

		// Initial location declarations
		initial to Init do { ShutOffHyd = 0; SystemValidity = false; Hydraulic = 0; ManageSignal = 0; }

		// transitions
		on receiveManager from Init to Init2

		internal from Init2 to Init3
			provided(ManageSignal == 1)
			do {printf("ShutoffValve three :ManageSignal is %d, trans from Init2 to Init3\n", ManageSignal);}

		internal from Init2 to Init
			provided(ManageSignal != 1)
			do {printf("ShutoffValve three :ManageSignal is %d, trans from Init2 to Init\n", ManageSignal);}

		on receiveSYSVal from Init3 to R1
			do {printf("ShutoffValve three :SystemValidity received is %d, trans from Init3 to R1\n", SystemValidity);}

		on receiveHydraulic from R1 to Exec
			do {printf("ShutoffValve three :Hydraulic received is %d, trans from R1 to Exec\n", Hydraulic);}

		internal from Exec to S1
			provided(SystemValidity == true)
			do{ShutOffHyd = 0;}

		internal from Exec to S2
			provided(SystemValidity == false)
			do{ShutOffHyd = 0;}

		on sendSOHyd from S1 to Init
			do {printf("ShutoffValve three :ShutOffHyd is %d, trans from S1 to Init\n", ShutOffHyd);}

		on sendSOHyd from S2 to Init
			do {printf("ShutoffValve three :ShutOffHyd is %d, trans from S2 to Init\n",ShutOffHyd);}

		// invariants

		// Priorities
	end

	atom type Valve_Manager()
		// Variable declarations
		data int ManageSignal

		// Port declarations
		export port WBSPort_t1 sendManager ( ManageSignal )
		port Internal_Port NormalToE1()
		port Internal_Port NormalToE2()
		port Internal_Port E1ToNormal()
		port Internal_Port E2ToNormal()
		port Internal_Port E1ToE2()
		port Internal_Port E2ToE1()

		// Clock declarations

		// Locations declaration
		place Normal, E1, E2

		// Initial location declarations
		initial to Normal do { ManageSignal = 0; }

		// transitions
		on sendManager from Normal to Normal

		on sendManager from E1 to E1

		on sendManager from E2 to E2

		on NormalToE1 from Normal to E1
			do {ManageSignal = 1;}

		on NormalToE2 from Normal to E2
			do {ManageSignal = 2;}

		on E1ToNormal from E1 to Normal
			do {ManageSignal = 0;}

		on E2ToNormal from E2 to Normal
			do {ManageSignal = 0;}

		on E2ToE1 from E2 to E1
			do {ManageSignal = 1;}

		on E1ToE2 from E1 to E2
			do {ManageSignal = 2;}

		// invariants

		// Priorities
	end

	atom type MeterValve()
		// Variable declarations
		data int ShutOffHyd
		data int MeterHyd
		data bool BrakeAntiSkidCMD
		data bool MechanicalCMD
		data int ManageSignal

		// Port declarations
		export port WBSPort_t2 receiveBRKASCMD ( BrakeAntiSkidCMD )
		export port WBSPort_t1 receiveSOHyd ( ShutOffHyd )
		export port WBSPort_t1 sendMeterHyd ( MeterHyd )
		export port WBSPort_t1 receiveManager (ManageSignal)

		// Clock declarations

		// Locations declaration
		place Init, Init2, Init3, R1, Exec, S1, S2

		// Initial location declarations
		initial to Init do { MeterHyd = 0; MechanicalCMD = false; }

		// transitions
		on receiveManager from Init to Init2

		internal from Init2 to Init3
			provided(ManageSignal == 0)
			do {printf("MeterValve one :ManageSignal is %d, trans from Init2 to Init3\n", ManageSignal);}

		internal from Init2 to Init
			provided(ManageSignal != 0)
			do {printf("MeterValve one :ManageSignal is %d, trans from Init2 to Init\n", ManageSignal);}	

		on receiveBRKASCMD from Init3 to R1

		on receiveSOHyd from R1 to Exec

		internal from Exec to S1
			provided(BrakeAntiSkidCMD == true || MechanicalCMD == true )
			do{MeterHyd = ShutOffHyd;}	

		internal from Exec to S2
			provided(BrakeAntiSkidCMD == false && MechanicalCMD == false)
			do{MeterHyd = 0;}

		on sendMeterHyd from S1 to Init

		on sendMeterHyd from S2 to Init

		// invariants

		// Priorities
	end

	// Add two fault module for Meter Valve
	atom type MeterValve_StuckOpen()
		// Variable declarations
		data int ShutOffHyd
		data int MeterHyd
		data bool BrakeAntiSkidCMD
		data bool MechanicalCMD
		data int ManageSignal

		// Port declarations
		export port WBSPort_t2 receiveBRKASCMD ( BrakeAntiSkidCMD )
		export port WBSPort_t1 receiveSOHyd ( ShutOffHyd )
		export port WBSPort_t1 sendMeterHyd ( MeterHyd )
		export port WBSPort_t1 receiveManager (ManageSignal)

		// Clock declarations

		// Locations declaration
		place Init, Init2, Init3, R1, Exec, S1, S2

		// Initial location declarations
		initial to Init do { MeterHyd = 0; MechanicalCMD = false; }

		// transitions
		on receiveManager from Init to Init2

		internal from Init2 to Init3
			provided(ManageSignal == 2)
			do {printf("MeterValve two :ManageSignal is %d, trans from Init2 to Init3\n", ManageSignal);}

		internal from Init2 to Init
			provided(ManageSignal != 2)
			do {printf("MeterValve two :ManageSignal is %d, trans from Init2 to Init\n", ManageSignal);}	

		on receiveBRKASCMD from Init3 to R1

		on receiveSOHyd from R1 to Exec

		internal from Exec to S1
			provided(BrakeAntiSkidCMD == true || MechanicalCMD == true )
			do{MeterHyd = ShutOffHyd;}	

		internal from Exec to S2
			provided(BrakeAntiSkidCMD == false && MechanicalCMD == false)
			do{MeterHyd = ShutOffHyd;}

		on sendMeterHyd from S1 to Init

		on sendMeterHyd from S2 to Init

		// invariants

		// Priorities
	end

	atom type MeterValve_StuckClose()
		// Variable declarations
		data int ShutOffHyd
		data int MeterHyd
		data bool BrakeAntiSkidCMD
		data bool MechanicalCMD
		data int ManageSignal

		// Port declarations
		export port WBSPort_t2 receiveBRKASCMD ( BrakeAntiSkidCMD )
		export port WBSPort_t1 receiveSOHyd ( ShutOffHyd )
		export port WBSPort_t1 sendMeterHyd ( MeterHyd )
		export port WBSPort_t1 receiveManager (ManageSignal)

		// Clock declarations

		// Locations declaration
		place Init, Init2, Init3, R1, Exec, S1, S2

		// Initial location declarations
		initial to Init do { MeterHyd = 0; MechanicalCMD = false; }

		// transitions
		on receiveManager from Init to Init2

		internal from Init2 to Init3
			provided(ManageSignal == 1)
			do {printf("MeterValve three :ManageSignal is %d, trans from Init2 to Init3\n", ManageSignal);}

		internal from Init2 to Init
			provided(ManageSignal != 1)
			do {printf("MeterValve three :ManageSignal is %d, trans from Init2 to Init\n", ManageSignal);}	

		on receiveBRKASCMD from Init3 to R1

		on receiveSOHyd from R1 to Exec

		internal from Exec to S1
			provided(BrakeAntiSkidCMD == true || MechanicalCMD == true )
			do{MeterHyd = 0;}	

		internal from Exec to S2
			provided(BrakeAntiSkidCMD == false && MechanicalCMD == false)
			do{MeterHyd = 0;}

		on sendMeterHyd from S1 to Init

		on sendMeterHyd from S2 to Init

		// invariants

		// Priorities
	end

	atom type ValveManager_OneState()
		// Variable declarations
		data int ManageSignal

		// Port declarations
		export port WBSPort_t1 sendManager ( ManageSignal )
		port Internal_Port NormalToE1()
		port Internal_Port E1ToNormal()

		// Clock declarations

		// Locations declaration
		place Normal, E1

		// Initial location declarations
		initial to Normal do { ManageSignal = 0; }

		// transitions
		on sendManager from Normal to Normal

		on sendManager from E1 to E1

		on NormalToE1 from Normal to E1
			do { ManageSignal = 1; }

		on E1ToNormal from E1 to Normal
			do { ManageSignal = 0; }

		// invariants

		// Priorities
	end

	atom type BSCU_ModuleTwo()
		// Variable declarations
		data int WheelSpeed
		data int PedalPosition
		data int GroundSpeed
		data bool SystemValidity
		data bool BrakeAntiSkidCMD
		data bool Power
		data bool LossBrakeCMD

		// Port declarations
		export port WBSPort_t1 receiveGSpeed ( GroundSpeed )
		export port WBSPort_t1 receiveWSpeed ( WheelSpeed )
		export port WBSPort_t1 receivePP ( PedalPosition )
		export port WBSPort_t2 sendSYSVal ( SystemValidity )
		export port WBSPort_t2 sendBRKASCMD ( BrakeAntiSkidCMD )
		export port WBSPort_t2 receivePWR( Power )
		export port WBSPort_t2 receiveBSCUFault ( LossBrakeCMD )

		// Clock declarations

		// Locations declaration
		place Exec1, R0, R1, R2, R3, P1, P2, Exec2, Exec3, AS1, AS2

		// Initial location declarations
		initial to Exec1 do { BrakeAntiSkidCMD = false; SystemValidity = false; Power = true;}

		// transitions
		on receivePWR from Exec1 to R0

		on receiveGSpeed from R0 to R1

		on receiveWSpeed from R1 to R2

		on receivePP from R2 to R3

		internal from R3 to P1
			provided(Power == true)
			do{SystemValidity = true;}

		internal from R3 to P2
			provided(Power == false)
			do{SystemValidity = false;}

		on sendSYSVal from P1 to Exec2

		on sendSYSVal from P2 to Exec2

		on receiveBSCUFault from Exec2 to Exec3

		internal from Exec3 to AS1
			provided(PedalPosition == 0 || WheelSpeed != GroundSpeed)
			do{BrakeAntiSkidCMD = false;}

		internal from Exec3 to AS2
			provided(PedalPosition != 0 && WheelSpeed == GroundSpeed)
			do{BrakeAntiSkidCMD = true;}

		on sendBRKASCMD from AS1 to Exec1

		on sendBRKASCMD from AS2 to Exec1

		// invariants

		// Priorities
	end

	atom type WheelSpeedProvider()
		// Variable declarations
		data int WheelSpeed

		// Port declarations
		export port WBSPort_t1 sendWSpeed ( WheelSpeed )

		// Clock declarations

		// Locations declaration
		place s0

		// Initial location declarations
		initial to s0 do {WheelSpeed = 8;}

		// transitions
		on sendWSpeed from s0 to s0

		// invariants

		// Priorities
	end

	atom type PedalPositionProvider()
		// Variable declarations
		data int PedalPosition

		// Port declarations
		export port WBSPort_t1 sendPP ( PedalPosition )

		// Clock declarations

		// Locations declaration
		place s0

		// Initial location declarations
		initial to s0 do {PedalPosition = 5;}

		// transitions
		on sendPP from s0 to s0

		// invariants

		// Priorities
	end

	atom type GroundSpeedProvider()
		// Variable declarations
		data int GroundSpeed

		// Port declarations
		export port WBSPort_t1 sendGSpeed ( GroundSpeed )

		// Clock declarations

		// Locations declaration
		place s0

		// Initial location declarations
		initial to s0 do {GroundSpeed = 8;}

		// transitions
		on sendGSpeed from s0 to s0 

		// invariants

		// Priorities
	end

	atom type MeterHydMonitor()
		// Variable declarations
		data int MeterHyd

		// Port declarations
		export port WBSPort_t1 receiveMeterHyd ( MeterHyd )

		// Clock declarations

		// Locations declaration
		place s0

		// Initial location declarations
		initial to s0 do {MeterHyd = 0;}

		// transitions
		on receiveMeterHyd from s0 to s0
			do {printf("********************\nSystem output received from MeterHydraulic is %d\n********************\n", MeterHyd);}

		// invariants

		// Priorities
	end

	// Atom type for Power Supply
	atom type PowerSupply_Normal()
		// Variable declarations
		data bool Power
		data int ManageSignal

		// Port declarations
		export port WBSPort_t2 sendPWR ( Power )
		export port WBSPort_t1 receiveManager (ManageSignal)

		// Clock declarations

		// Locations declaration
		place Exec, Init, Init2

		// Initial location declarations
		initial to Init do { Power = true; }

		// transitions
		on receiveManager from Init to Init2

		internal from Init2 to Exec
			provided(ManageSignal == 0)
			do { Power = true; }

		internal from Init2 to Init
			provided(ManageSignal != 0)

		on sendPWR from Exec to Init

		// invariants

		// Priorities
	end

	atom type PowerSupply_Loss()
		// Variable declarations
		data bool Power
		data int ManageSignal

		// Port declarations
		export port WBSPort_t2 sendPWR ( Power )
		export port WBSPort_t1 receiveManager (ManageSignal)

		// Clock declarations

		// Locations declaration
		place Exec, Init, Init2

		// Initial location declarations
		initial to Init do { Power = true; }

		// transitions
		on receiveManager from Init to Init2

		internal from Init2 to Exec
			provided(ManageSignal == 1)
			do { Power = false; }

		internal from Init2 to Init
			provided(ManageSignal != 1)

		on sendPWR from Exec to Init

		// invariants

		// Priorities
	end

	atom type BSCU_ModuleOne()
		// Variable declarations
		data bool LossBrakeCMD
		data int ManageSignal

		// Port declarations
		export port WBSPort_t2 sendBSCUFault ( LossBrakeCMD )
		export port WBSPort_t1 receiveManager (ManageSignal)

		// Clock declarations

		// Locations declaration
		place Exec, Init, Init2

		// Initial location declarations
		initial to Init do { LossBrakeCMD = true; }

		// transitions
		on receiveManager from Init to Init2

		internal from Init2 to Exec
			provided(ManageSignal == 0)
			do { LossBrakeCMD = true; }

		internal from Init2 to Init
			provided(ManageSignal != 0)

		on sendBSCUFault from Exec to Init

		// invariants

		// Priorities
	end

	atom type BSCU_ModuleOne_Fault()
		// Variable declarations
		data bool LossBrakeCMD
		data int ManageSignal

		// Port declarations
		export port WBSPort_t2 sendBSCUFault ( LossBrakeCMD )
		export port WBSPort_t1 receiveManager (ManageSignal)

		// Clock declarations

		// Locations declaration
		place Exec, Init, Init2

		// Initial location declarations
		initial to Init do { LossBrakeCMD = true; }

		// transitions
		on receiveManager from Init to Init2

		internal from Init2 to Exec
			provided(ManageSignal == 1)
			do { LossBrakeCMD = false; }

		internal from Init2 to Init
			provided(ManageSignal != 1)

		on sendBSCUFault from Exec to Init

		// invariants

		// Priorities
	end

	// Add compound type for BSCU Module Two
	compound type BSCUModuleTwo()

		// Variable declarations

		// Component instantiations
		component PowerSupply_Normal Component1()
		component PowerSupply_Loss Component2()
		component ValveManager_OneState Component3()

		// Connector instantiations
		connector sendPWR connect1( Component1.sendPWR, Component2.sendPWR)
		connector transFaultManageSig_v2 connect2( Component3.sendManager, Component1.receiveManager, Component2.receiveManager)

		export port connect1.sendSignal as sendPWR

		// Priority instantiations
	end

	// Add compound type for BSCU
	compound type BSCUModuleOne()

		// Variable declarations

		// Component instantiations
		component BSCU_ModuleOne Component1()
		component BSCU_ModuleOne_Fault Component2()
		component ValveManager_OneState Component3()

		// Connector instantiations
		connector sendBSCUFault connect1( Component1.sendBSCUFault, Component2.sendBSCUFault)
		connector transFaultManageSig_v2 connect2( Component3.sendManager, Component1.receiveManager, Component2.receiveManager)

		export port connect1.sendSignal as sendBSCUFault

		// Priority instantiations
	end

	compound type BSCU()

		// Port declarations

		// Variable declarations

		// Component instantiations
		component BSCUModuleOne Component1()
		component BSCU_ModuleTwo Component2()

		// Connector instantiations
		connector getBSCUFault connect1(Component1.sendBSCUFault, Component2.receiveBSCUFault)
		connector getPWR connect2 (Component2.receivePWR)
		connector getGSpeed connect3 (Component2.receiveGSpeed)
		connector getWSpeed connect4 (Component2.receiveWSpeed)
		connector getPP connect5 (Component2.receivePP)
		connector sendSYSVal connect6 (Component2.sendSYSVal)
		connector sendBRKASCMD connect7 (Component2.sendBRKASCMD)

		// Priority instantiations
		export port connect2.receiveSignal as receivePWR
		export port connect3.receiveSignal as receiveGSpeed
		export port connect4.receiveSignal as receiveWSpeed
		export port connect5.receiveSignal as receivePP
		export port connect6.sendSignal as sendSYSVal
		export port connect7.sendSignal as sendBRKASCMD
	end

	// Add compound type for Power Supply 
	compound type PowerSupply()

		// Variable declarations

		// Component instantiations
		component PowerSupply_Normal Component1()
		component PowerSupply_Loss Component2()
		component ValveManager_OneState Component3()

		// Connector instantiations
		connector sendPWR connect1( Component1.sendPWR, Component2.sendPWR)
		connector transFaultManageSig_v2 connect2( Component3.sendManager, Component1.receiveManager, Component2.receiveManager)

		export port connect1.sendSignal as sendPWR

		// Priority instantiations
	end

	compound type HydraulicPumpCompound()

		// Variable declarations

		// Component instantiations
		component HydraulicPump Component1()
		component HydraulicPump_Loss Component2()
		component ValveManager_OneState Component3()

		// Connector instantiations
		connector sendHydraulic connect1( Component1.sendHydraulic, Component2.sendHydraulic)
		connector transFaultManageSig_v2 connect2( Component3.sendManager, Component1.receiveManager, Component2.receiveManager)

		export port connect1.sendSignal as sendHydraulic

		// Priority instantiations
	end

	compound type ShutoffValveCompound()

		// Variable declarations

		// Component instantiations
		component ShutoffValve Component1()
		component ShutoffValve_StuckOpen Component2()
		component ShutoffValve_StuckClose Component3()
		component Valve_Manager Component4()

		// Connector instantiations
		connector getSYSVal connect1( Component1.receiveSYSVal, Component2.receiveSYSVal, Component3.receiveSYSVal)
		connector sendSOHyd connect2( Component1.sendSOHyd, Component2.sendSOHyd, Component3.sendSOHyd)
		connector transFaultManageSig connect3( Component4.sendManager, Component1.receiveManager, Component2.receiveManager, Component3.receiveManager)
		connector getHydraulic connect4( Component1.receiveHydraulic, Component2.receiveHydraulic, Component3.receiveHydraulic)

		export port connect1.receiveSignal as receiveSYSVal
		export port connect2.sendSignal as sendSOHyd
		export port connect4.sendSignal as receiveHydraulic
		// Priority instantiations
	end

	compound type MeterValveCompound()

		// Variable declarations

		// Component instantiations
		component MeterValve Component1()
		component MeterValve_StuckOpen Component2()
		component MeterValve_StuckClose Component3()
		component Valve_Manager Component4()

		// Connector instantiations
		connector getBRKASCMD connect1( Component1.receiveBRKASCMD, Component2.receiveBRKASCMD, Component3.receiveBRKASCMD)
		connector sendMeterHyd connect2(Component1.sendMeterHyd, Component2.sendMeterHyd, Component3.sendMeterHyd)
		connector transFaultManageSig connect3( Component4.sendManager, Component1.receiveManager, Component2.receiveManager, Component3.receiveManager)
		connector getSOHyd connect4( Component1.receiveSOHyd, Component2.receiveSOHyd, Component3.receiveSOHyd)
		
		export port connect1.receiveSignal as receiveBRKASCMD
		export port connect2.sendSignal as sendMeterHyd
		export port connect4.sendSignal as receiveSOHyd

		// Priority instantiations
	end

	// Compound types definitions
	compound type Compound()

		// Variable declarations

		// Component instantiations
		component WheelSpeedProvider Component1()
		component PedalPositionProvider Component2()
		component GroundSpeedProvider Component3()
		component HydraulicPumpCompound Component4()
		component ShutoffValveCompound Component5()
		component MeterValveCompound Component6()
		component BSCU Component7()
		component MeterHydMonitor Component8()
		component PowerSupply Component9()

		// Connector instantiations
		connector transHyd connect1( Component1.sendWSpeed, Component7.receiveWSpeed)
		connector transHyd connect2( Component2.sendPP, Component7.receivePP)
		connector transHyd connect3( Component3.sendGSpeed, Component7.receiveGSpeed)
		connector transCmd connect4( Component7.sendSYSVal, Component5.receiveSYSVal)
		connector transCmd connect5( Component7.sendBRKASCMD, Component6.receiveBRKASCMD)
		connector transHyd connect6( Component4.sendHydraulic, Component5.receiveHydraulic)
		connector transHyd_Fault connect7( Component5.sendSOHyd, Component6.receiveSOHyd)
		connector transHyd connect8( Component6.sendMeterHyd, Component8.receiveMeterHyd)
		connector transCmd connect9( Component9.sendPWR, Component7.receivePWR )

		// Priority instantiations
	end
end