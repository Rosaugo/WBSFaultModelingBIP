model PLAPackage
    port type PLAPort_t1(bool a)
    port type PLAPort_t2(int a, int b)
    port type PLAPort_t3(bool a,bool b,bool c)
    port type PLAPort_t4(int a)
    port type PLAPort_t5(bool a,bool b)
    port type Internal_port

    atomic type TaskAtom
        data int mysin,mycos
        port PLAPort_t2 produce(mysin,mycos)
        export port PLAPort_t2 sendMean(mysin,mycos)
        export port PLAPort_t2 sendBIT(mysin,mycos)
        port Internal_port EndToWait

        place WAIT, START, SEND, END

        initial to WAIT
            do {mysin = 0;mycos = 0;}

        on produce from WAIT to START
            do {mysin = 5000;mycos = 5000;}

        on sendBIT from START to SEND

        on sendMean from SEND to END

        on EndToWait from END to WAIT
    end

    atomic type BITAtom_enc
        data int mysin,mycos
	    data int p,q
        data bool Signal_enc
        export port PLAPort_t2 receiveBIT(mysin,mycos)
        export port PLAPort_t1 sendBIT(Signal_enc)
        port Internal_port StartToWait
        port Internal_port ExecToS1
        port Internal_port ExecToS2
        port Internal_port ExecToWait
        port Internal_port S1ToEnd
        port Internal_port S2ToEnd

        place START, WAIT, EXEC, S1, S2, END

        initial to START

        on StartToWait from START to WAIT
            do {p = 0; q = 0; Signal_enc = false;}

        on receiveBIT from WAIT to EXEC

        on ExecToS1 from EXEC to S1
            provided (mysin < 500 && mycos < 500)
            do {p = p + 1; q = 0;}

        on ExecToS2 from EXEC to S2
            provided (mysin >= 500 && mycos >= 500)
            do {p = 0; q = q + 1;}

        on ExecToWait from EXEC to WAIT
            provided ((mysin >= 500 || mycos >= 500) && (mysin < 500 || mycos < 500))
            do {p = 0; q = 0;}
        
        on S1ToEnd from S1 to END
            provided (p >= 5)
            do {Signal_enc = true;}

        on S2ToEnd from S2 to END
            provided (q >= 5)
            do {Signal_enc = false;}

        on sendBIT from S1 to WAIT
            provided (p < 5)

        on sendBIT from S2 to WAIT
            provided (q < 5)

        on sendBIT from END to WAIT
    end

    atomic type BITAtom_sin
        data int mysin,mycos
	    data int p,q
        data bool Signal_sin
        export port PLAPort_t2 receiveBIT(mysin,mycos)
        export port PLAPort_t1 sendBIT(Signal_sin)
        port Internal_port StartToWait
        port Internal_port ExecToS1
        port Internal_port ExecToS2
        port Internal_port ExecToWait
        port Internal_port S1ToEnd
        port Internal_port S2ToEnd

        place START, WAIT, EXEC, S1, S2, END

        initial to START

        on StartToWait from START to WAIT
            do {p = 0; q = 0; Signal_sin = false;}

        on receiveBIT from WAIT to EXEC

        on ExecToS1 from EXEC to S1
            provided (mysin > 4000)
            do {p = p + 1; q = 0;}

        on ExecToS2 from EXEC to S2
            provided (mysin >= 500 && mysin <= 4000)
            do {p = 0; q = q + 1;}

        on ExecToWait from EXEC to WAIT
            provided (mysin < 500)
            do {p = 0; q = 0;}
        
        on S1ToEnd from S1 to END
            provided (p >= 5)
            do {Signal_sin = true;}

        on S2ToEnd from S2 to END
            provided (q >= 5)
            do {Signal_sin = false;}

        on sendBIT from S1 to WAIT
            provided (p < 5)

        on sendBIT from S2 to WAIT
            provided (q < 5)

        on sendBIT from END to WAIT
    end

    atomic type BITAtom_cos
        data int mysin,mycos
	    data int p,q
        data bool Signal_cos
        
        export port PLAPort_t2 receiveBIT(mysin,mycos)
        export port PLAPort_t1 sendBIT(Signal_cos)
        port Internal_port StartToWait
        port Internal_port ExecToS1
        port Internal_port ExecToS2
        port Internal_port ExecToWait
        port Internal_port S1ToEnd
        port Internal_port S2ToEnd

        place START, WAIT, EXEC, S1, S2, END

        initial to START

        on StartToWait from START to WAIT
            do {p = 0; q = 0; Signal_cos = false;}

        on receiveBIT from WAIT to EXEC

        on ExecToS1 from EXEC to S1
            provided (mycos > 4000)
            do {p = p + 1; q = 0;}

        on ExecToS2 from EXEC to S2
            provided (mycos >= 500 && mycos <= 4000)
            do {p = 0; q = q + 1;}

        on ExecToWait from EXEC to WAIT
            provided (mycos < 500)
            do {p = 0; q = 0;}
        
        on S1ToEnd from S1 to END
            provided (p >= 5)
            do {Signal_cos = true;}

        on S2ToEnd from S2 to END
            provided (q >= 5)
            do {Signal_cos = false;}

        on sendBIT from S1 to WAIT
            provided (p < 5)

        on sendBIT from S2 to WAIT
            provided (q < 5)

        on sendBIT from END to WAIT
    end

    atomic type BITAtom_Decider
        data bool Signal_enc
        data bool Signal_sin
        data bool Signal_cos 
        data bool Signal

        export port PLAPort_t3 receiveSignal(Signal_enc,Signal_sin,Signal_cos)
        export port PLAPort_t1 output(Signal)
        port Internal_port StartToWait
        port Internal_port ExecToS1
        port Internal_port ExecToS2

        place START, WAIT, EXEC, S1, S2

        initial to START
            do {Signal = true;}

        on StartToWait from START to WAIT

        on receiveSignal from WAIT to EXEC

        on ExecToS1 from EXEC to S1
            provided (Signal_enc == false && Signal_sin == false && Signal_cos == false)
            do {Signal = false;}

        on ExecToS2 from EXEC to S2
            provided (Signal_enc == true || Signal_sin == true || Signal_cos == true)
            do {Signal = true;}

        on output from S1 to WAIT

        on output from S2 to WAIT
    end

    atomic type CalAtom
        data int mysin,mycos
        data int myangle

        export port PLAPort_t2 receiveMean(mysin,mycos)
        export port PLAPort_t4 sendMean(myangle)
        port Internal_port ExecToEnd

        place START, EXEC, END

        initial to START
            do {myangle = 0;}

        on receiveMean from START to EXEC

        on ExecToEnd from EXEC to END

        on sendMean from END to START
    end

    atomic type ExtAtom
        data int mymean
        data int p,q
        data bool Signal_ext
        data int Signal_Min_Limit,Signal_Max_Limit

        export port PLAPort_t4 receiveMean(mymean)
        export port PLAPort_t1 sendRes(Signal_ext)
        port Internal_port StartToWait
        port Internal_port ExecToS1
        port Internal_port ExecToS2
        port Internal_port S1ToEnd
        port Internal_port S2ToEnd

        place START, WAIT, EXEC, S1, S2, END

        initial to START
            do {Signal_Min_Limit = 500;Signal_Max_Limit = 15000; Signal_ext = false;}

        on StartToWait from START to WAIT
            do {p = 0; q = 0;}

        on receiveMean from WAIT to EXEC

        on ExecToS1 from EXEC to S1
            provided (mymean > Signal_Max_Limit || mymean < Signal_Min_Limit)
            do {p = p + 1; q = 0;}

        on ExecToS2 from EXEC to S2
            provided (mymean >= Signal_Min_Limit && mymean <= Signal_Max_Limit)
            do {p = 0; q = q + 1;}
        
        on S1ToEnd from S1 to END
            provided (p >= 5)
            do {Signal_ext = true;}

        on S2ToEnd from S2 to END
            provided (q >= 5)
            do {Signal_ext = false;}

        on sendRes from S1 to WAIT
            provided (p < 5)

        on sendRes from S2 to WAIT
            provided (q < 5)

        on sendRes from END to WAIT
    end

    atomic type SloAtom
        data int mymean
        data bool Signal_slo
        data int premean
	data int p,q
	data int Signal_Slope_Limit

        export port PLAPort_t4 receiveMean(mymean)
        export port PLAPort_t1 sendRes(Signal_slo)
        port Internal_port StartToWait
        port Internal_port Wait2ToWait3
        port Internal_port ExecToS1
        port Internal_port ExecToS2
        port Internal_port S1ToEnd
        port Internal_port S2ToEnd

        place START, WAIT, WAIT1, WAIT2, WAIT3, EXEC, S1, S2, END

        initial to START
	    do {Signal_Slope_Limit = 1; Signal_slo = false;}

        on StartToWait from START to WAIT
            do {p = 0; q = 0; mymean = 0; premean = 0;}

        on receiveMean from WAIT to WAIT1

        on sendRes from WAIT1 to WAIT2

        on Wait2ToWait3 from WAIT2 to WAIT3

        on receiveMean from WAIT3 to EXEC

        on ExecToS1 from EXEC to S1
            provided ((mymean - premean) > Signal_Slope_Limit || (premean - mymean) > Signal_Slope_Limit)
            do {p = p + 1; q = 0;}

        on ExecToS2 from EXEC to S2
            provided ((mymean - premean) <= Signal_Slope_Limit || (premean - mymean) <= Signal_Slope_Limit)
            do {p = 0; q = q + 1;}

        on S1ToEnd from S1 to END
            provided (p >= 5)
            do {Signal_slo = true;}

        on S2ToEnd from S2 to END
            provided (q >= 5)
            do {Signal_slo = false;}

        on sendRes from S1 to WAIT2
            provided (p < 5)

        on sendRes from S2 to WAIT2
            provided (q < 5)

        on sendRes from END to WAIT2
    end

    atomic type ESAtom_Decider
        data bool Signal_BIT
        data bool Signal_Ext
        data bool Signal_Slo
        data bool ValidFlag

        export port PLAPort_t5 receiveSignal1(Signal_Ext,Signal_Slo)
        export port PLAPort_t1 receiveSignal2(Signal_BIT)
        port PLAPort_t1 output(ValidFlag)
        port Internal_port StartToWait
        port Internal_port ExecToS1
        port Internal_port ExecToS2

        place START, WAIT, WAIT1, EXEC, S1, S2

        initial to START
            do {ValidFlag = true;}

        on StartToWait from START to WAIT

        on receiveSignal1 from WAIT to WAIT1

	    on receiveSignal2 from WAIT1 to EXEC 

        on ExecToS1 from EXEC to S1
            provided (Signal_BIT == false && Signal_Ext == false && Signal_Slo == false)
            do {ValidFlag = false;}

        on ExecToS2 from EXEC to S2
            provided (Signal_BIT == true || Signal_Ext == true || Signal_Slo == true)
            do {ValidFlag = true;}

        on output from S1 to WAIT

        on output from S2 to WAIT
    end


    connector type OneToThree(PLAPort_t2 r1, PLAPort_t2 r2, PLAPort_t2 r3, PLAPort_t2 r4)
        define [ r1 r2 r3 r4 ]

        on r1 r2 r3 r4 down {r2.a = r1.a; r3.a = r1.a; r4.a = r1.a; r2.b = r1.b; r3.b = r1.b; r4.b = r1.b;}
    end

    connector type OneToTwo(PLAPort_t4 r1, PLAPort_t4 r2, PLAPort_t4 r3)
        define [ r1 r2 r3 ]

        on r1 r2 r3 down {r2.a = r1.a; r3.a = r1.a;}
    end

    connector type ThreeToOne(PLAPort_t1 r1, PLAPort_t1 r2, PLAPort_t1 r3, PLAPort_t3 r4)
        define [ r1 r2 r3 r4 ]

        on r1 r2 r3 r4 down {r4.a = r1.a; r4.b = r2.a; r4.c = r3.a;}
    end

    connector type OneToOne_t1(PLAPort_t2 r1, PLAPort_t2 r2)
        define [ r1 r2 ]

        on r1 r2 down {r2.a = r1.a; r2.b = r1.b;}
    end

    connector type TwoToOne(PLAPort_t1 r1, PLAPort_t1 r2,PLAPort_t5 r3)
	    define [ r1 r2 r3 ]

	    on r1 r2 r3 down {r3.a = r1.a; r3.b = r2.a;}
    end

    connector type OneToOne_t2(PLAPort_t1 r1, PLAPort_t1 r2)
        define [ r1 r2 ]

        on r1 r2 down {r2.a = r1.a;}
    end

    compound type PLACompound
        component TaskAtom t1
        component BITAtom_enc p1
        component BITAtom_sin p2
        component BITAtom_cos p3
        component BITAtom_Decider d1
        component CalAtom c1
        component ExtAtom e1
        component SloAtom s1
        component ESAtom_Decider d2

        connector OneToThree ct1(t1.sendBIT,p1.receiveBIT,p2.receiveBIT,p3.receiveBIT)
        connector OneToTwo ct2(c1.sendMean,e1.receiveMean,s1.receiveMean)
        connector OneToOne_t1 ct3(t1.sendMean,c1.receiveMean)
        connector ThreeToOne ct4(p1.sendBIT,p2.sendBIT,p3.sendBIT,d1.receiveSignal)
        connector TwoToOne ct5(e1.sendRes,s1.sendRes,d2.receiveSignal1)
        connector OneToOne_t2 ct6(d1.output,d2.receiveSignal2)

        //export port d2.output as output
    end

    component PLACompound p1 
end
